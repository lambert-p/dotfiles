#+TITLE: My Emacs Config
#+AUTHOR: Paul M Lambert [[mailto:paul.lambert@linux.com][paul.lambert@linux.com]]
#+STARTUP: hidestars
#+PROPERTY: header-args:emacs-lisp :tangle yes

Below is my Emacs configuration with [[info:org#Working with source code][documentation of what it does]].

* Header
I include full Common Lisp functionality.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

* Personal Information
I know Emacs -- it's only fair that Emacs knows me!

#+BEGIN_SRC emacs-lisp
  ;; include user information
  (setq user-full-name "Paul M Lambert"
        user-mail-address "paul.lambert@linux.com")
#+END_SRC

* Setting up the package manager
** Add package sources
The default repos are pretty limited in their selection of packages, so let's add some better ones.

#+BEGIN_SRC emacs-lisp
  ;; update package sources
  (require 'package)
  ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  ;; (unless (assoc-default "melpa" package-archives)
  ;;   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;;   (package-refresh-contents))
  (add-to-list 'package-archives
    '("melpa-stable" . "https://stable.melpa.org/packages/")
    '("MELPA" . "http://melpa.milkbox.net/packages/"))

  (package-initialize)
  (setq package-enable-at-startup nil)
#+END_SRC

You'll need to use =M-x package-refresh-contents= to reload the list of packages after adding these for the first time.

** Adding use-package.el
[[https://github.com/jwiegley/use-package][use-package.el]] is a life saver for handling dependencies, especially if you use multiple machines. Check it out.

#+BEGIN_SRC emacs-lisp
  ;; use-package.el init
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)

  (require 'use-package)

  (use-package auto-compile
    :ensure t
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* General settings
** Aesthetics
Remove the ugly menu bars and scroll bars and such

#+BEGIN_SRC emacs-lisp
  ;; remove bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Set up the awesome color scheme, Zenburn!

#+BEGIN_SRC emacs-lisp
  ;; custom color scheme
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'zenburn t)
#+END_SRC

Set up font size (recall that the value is in 1/10pt)

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 120)
#+END_SRC

#+RESULTS:

** Global defaults

Change yes-or-no prompts to y-or-n, because typing that much that frequently is awful!

#+BEGIN_SRC emacs-lisp
  ;; change the default prompts
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Switch from tabs to spaces for all files... tabs are worthless..

#+BEGIN_SRC emacs-lisp
  ;; use spaces by default
  (setq-default indent-tabs-mode nil)
#+END_SRC

Let's disable the nasty startup messages and go straight to the \*scratch\* buffer

#+BEGIN_SRC emacs-lisp
  ;; disable splash screen
  (setq inhibit-splash-screen t
        inhibit-startup-echo-area-message t
        inhibit-startup-message t)
#+END_SRC

Enable line and column numbers on all files

#+BEGIN_SRC emacs-lisp
  ;; enable line and column numbers
  (line-number-mode t)
  (column-number-mode t)
  (global-linum-mode t)
#+END_SRC

And all the smaller, miscellaneous changes

#+BEGIN_SRC emacs-lisp
  ;; use English as our base language
  (setq current-language-environment "English")

  ;; better word wrapping
  (visual-line-mode 1)

  ;; enforce trailing newlines
  (setq require-final-newline t)
#+END_SRC

* Helper Functions
Function for making evil-mode =<Esc>= work properly -- in particular, hitting =<Esc>= should quit the minibuffer.

#+BEGIN_SRC emacs-lisp
  ;; quit minibuffer entirely with <Esc>
  (defun my-minibuffer-keyboard-quit ()
    "From github user @davvil's init.el"
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

#+END_SRC

* Languages
  Below are language-specific packages and their customizations.

** Clojure

#+BEGIN_SRC emacs-lisp
  ;; clojure
  (use-package cider
    :ensure t)
#+END_SRC

** CoffeeScript

#+BEGIN_SRC emacs-lisp
  ;; coffeescript
  (use-package coffee-mode
    :ensure t
    :mode "\\.coffee\\'"
    :config
    (custom-set-variables '(coffee-tab-width 2)))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  ;; haskell
  (use-package ghc
    :ensure t
    :commands ghc)
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
  ;; javascript
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq-default
     js2-bounce-indent-p nil
     js-indent-level 2
     js2-basic-indent 2
     js2-basic-offset 2
     js2-auto-indent-p t
     js2-cleanup-whitespace t
     js2-enter-indents-newline t
     js2-indent-on-enter-key t))

#+END_SRC

** Lisp

#+BEGIN_SRC emacs-lisp
  ;; lisp
  (use-package slime
    :ensure t
    :commands slime
    :config
    (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
      (add-hook hook 'elisp-slime-nav-mode))

    ;; hook up SLIME to SBCL
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    :bind ("C-h K" . find-function-on-key))

#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  ;; lua
  (use-package lua-mode
    :ensure t
    :mode "\\.lua\\'"
    :commands lua-mode)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  ;; python
  (use-package python-mode
    :ensure t
    :commands python-mode)
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
  ;; ruby
  (use-package ruby-mode
    :ensure t
    :commands ruby-mode
    :mode (("Gemfile\\'" . ruby-mode)
           ("Kirkfile\\'" . ruby-mode)
           ("Rakefile\\'" . ruby-mode)
           ("Vagrantfile\\'" . ruby-mode)
           ("\\.builder\\'" . ruby-mode)
           ("\\.gemspec\\'" . ruby-mode)
           ("\\.irbrc\\'" . ruby-mode)
           ("\\.pryrc\\'" . ruby-mode)
           ("\\.rake\\'" . ruby-mode)
           ("\\.rjs\\'" . ruby-mode)
           ("\\.ru\\'" . ruby-mode)
           ("\\.rxml\\'" . ruby-mode))
    :init (setq ruby-use-encoding-map nil))
#+END_SRC

** Web mode

#+BEGIN_SRC emacs-lisp
  ;; web
  (use-package web-mode
    :ensure t
    :mode "\\.(html?|css|scss|erb|php|[agj]sp|as[cp]x)\\'"
    :config
    (setq
     web-mode-markup-indent-offet 2
     web-mode-css-indent-offset 2))
#+END_SRC

* Utility
** Evil-mode

#+BEGIN_SRC emacs-lisp
  ;; evil-mode -- set reasonable defaults for vim modal emulation
  (use-package evil
    :ensure t
    :init
    (progn
      (setq
       ;; incremental search
       evil-search-module 'isearch

       ;; switch from emacs' default undo
       evil-want-fine-undo t))
    :config
    (progn
      ;; Map C-d C-u
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
      (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-motion-state-map (kbd "C-d") 'evil-scroll-down)

      ;; esc ALWAYS quits
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'my-minibuffer-keyboard-quit)

      ;; map M-x describe-function to 'k'
      (evil-define-key 'normal emacs-lisp-mode-map (kbd "K")
        'elisp-slime-nav-describe-elisp-thing-at-point)

      ;; boot evil by default
      (evil-mode 1)))

#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  ;; magit -- a git wrapper
  (use-package magit
    :ensure t
    :config
    (setq magit-last-seen-setup-instructions "1.4.0")
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  ;; org-mode
  (use-package org
    :ensure t
    :config
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (define-key org-mode-map "\M-q" 'toggle-truncate-lines)

    ;; record when switching from a TODO state to a DONE state
    (setq
     org-log-done 'time
     org-log-done 'note

     org-agenda-files (list "~/org/work.org"
                            "~/org/home.org"
                            "~/org/todo.org"
                            "~/org/blog.org")

     org-todo-keywords
     '((sequence "TODO(t)" "|" "DONE(d)")
       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
       (sequence "|" "CANCELED(c)"))

     ;; warn me two weeks in advance about looming deadlines
     org-deadline-warning-days 14))

#+END_SRC

** Markdown Mode

#+BEGIN_SRC emacs-lisp
 ;; markdown-mode
 (use-package markdown-mode
 :ensure t
 :commands (markdown-mode gfm-mode)
 :mode (("README\\.md\\'" . gfm-mode)
        ("'\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode))
 :init (setq markdown-command "multimarkdown"))
 
#+END_SRC

#+RESULTS:
: ((\.markdown\' . markdown-mode) ('\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.hbs\' . handlebars-mode) (\.hbs$ . handlebars-mode) (\.handlebars$ . handlebars-mode) (\.brs\' . brightscript-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.(html?|css|scss|erb|php|[agj]sp|as[cp]x)\' . web-mode) (\.rxml\' . ruby-mode) (\.ru\' . ruby-mode) (\.rjs\' . ruby-mode) (\.rake\' . ruby-mode) (\.pryrc\' . ruby-mode) (\.irbrc\' . ruby-mode) (\.gemspec\' . ruby-mode) (\.builder\' . ruby-mode) (Vagrantfile\' . ruby-mode) (Rakefile\' . ruby-mode) (Kirkfile\' . ruby-mode) (Gemfile\' . ruby-mode) (\.js\' . js2-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (\.cson\' . coffee-mode) (Cakefile\' . coffee-mode) (\.iced\' . coffee-mode) (\.coffee\' . coffee-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (\.lua\' . lua-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (/git-rebase-todo\' . git-rebase-mode) (CMakeLists\.txt\' . cmake-mode) (\.cmake\' . cmake-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:3fr\|a\(?:rw\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|jvu\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

* External scripts
  The following are scripts or packages loaded from a local directory.
** Set up the load path
First things first, we'll need to set up our local load path

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** org-to-ghpages
This is a script I wrote for exporting org-mode data to GitHub Flavored Markdown, which I use for constructing Jekyll blog posts (powered with Pygments and the gh-pages gem), and actual GitHub pages. For more information about the script, please visit [[https://github.com/lambertington/org-to-ghpages/][its repository]].

#+BEGIN_SRC emacs-lisp
  (require 'org-to-ghpages)
  (setq org-ghpages-post-dir "~/code/lambertington.github.io/_posts/")
#+END_SRC

** BrightScript mode

This is some basic syntax highlighting for Brightscript, useful when developing Roku applications. The code was generously taken from [[https://github.com/MarkRoddy/brightscript-mode/blob/master/brightscript-mode.el][GitHub user MarkRoddy]]. I'm hoping to be able to contribute on extending it sooner than later.

#+BEGIN_SRC emacs-lisp
  ;; brightscript
  (require 'brightscript-mode)
  (add-to-list 'auto-mode-alist '("\\.brs\\'" . brightscript-mode))
#+END_SRC
** Handlebars mode

This adds some syntax highlighting and standard keybinds when editing Handlebars files. Please see [[https://github.com/danielevans/handlebars-mode][the repository]] for more information.

#+BEGIN_SRC emacs-lisp
  (require 'handlebars-mode)
  (add-to-list 'auto-mode-alist '("\\.hbs\\'" . handlebars-mode))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  ;; yaml
  ;;  (use-package yaml-mode
  ;;    :commands yaml-mode)

  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

