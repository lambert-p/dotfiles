#+TITLE: My Emacs Config
#+AUTHOR: Paul M Lambert [[mailto:lambertington@gmail.com][lambertington@gmail.com]]
#+STARTUP: hidestars
#+PROPERTY: header-args:emacs-lisp :tangle yes

Below is my Emacs configuration with [[info:org#Working with source code][documentation of what it does].

* Header
I include this library to ensure full Common Lisp functionality.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

* Personal Information
I know Emacs -- it's only fair that Emacs knows me!

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Paul M Lambert"
        user-mail-address "lambertington@gmail.com")
#+END_SRC

* Setting up the package manager
** Add package sources
The default repos are pretty limited in their selection of packages, so let's add some better ones.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (package-refresh-contents))
  (package-initialize)
  (setq package-enable-at-startup nil)
#+END_SRC

You'll need to use =M-x package-refresh-contents= to reload the list of packages after adding these for the first time.

** Adding use-package.el
[[https://github.com/jwiegley/use-package][use-package.el]] is a life saver for handling dependencies, especially if you use multiple machines. Check it out.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)

  (require 'use-package)

  (use-package auto-compile
    :ensure t
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* General settings
** Aesthetics
Remove the ugly menu bars and scroll bars and such

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Set up the awesome color scheme, Zenburn!

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'zenburn t)
#+END_SRC

** Global defaults

Change yes-or-no prompts to y-or-n, because typing that much that frequently is awful!

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Switch from tabs to spaces for all files... tabs are worthless..

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Let's disable the nasty startup messages and go straight to the \*scratch\* buffer

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-echo-area-message t
        inhibit-startup-message t)
#+END_SRC

Enable line/col numbers on all files

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (global-linum-mode t)
#+END_SRC

And all the smaller, miscellaneous changes

#+BEGIN_SRC emacs-lisp
  ;; use English as our base language
  (setq current-language-environment "English")

  ;; better word wrapping
  (visual-line-mode 1)

  ;; enforce trailing newlines
  (setq require-final-newline t)
#+END_SRC

* Helper Functions
Function for making evil-mode esc work properly
#+BEGIN_SRC emacs-lisp
  (defun my-minibuffer-keyboard-quit ()
    "Abort recursive edit.
    From github user @davvil's init.el"
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

#+END_SRC

* Languages
** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC

** CoffeeScript

#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :ensure t
    :mode "\\.coffee\\'"
    :config
    (custom-set-variables '(coffee-tab-width 2)))
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq
     js2-basic-offset 2
     js2-bounce-indent-p nil))
#+END_SRC
   
** Lisp


#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :ensure t
    :commands lisp-mode
    :config
    (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
      (add-hook hook 'elisp-slime-nav-mode))

    ;; hook up SLIME to SBCL
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    :bind ("C-h K" . find-function-on-key))

#+END_SRC
   
** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :ensure t
    :commands ruby-mode
    :mode (("Gemfile\\'" . ruby-mode)
           ("Kirkfile\\'" . ruby-mode)
           ("Rakefile\\'" . ruby-mode)
           ("Vagrantfile\\'" . ruby-mode)
           ("\\.builder\\'" . ruby-mode)
           ("\\.gemspec\\'" . ruby-mode)
           ("\\.irbrc\\'" . ruby-mode)
           ("\\.pryrc\\'" . ruby-mode)
           ("\\.rake\\'" . ruby-mode)
           ("\\.rjs\\'" . ruby-mode)
           ("\\.ru\\'" . ruby-mode)
           ("\\.rxml\\'" . ruby-mode))
    :init (setq ruby-use-encoding-map nil))
#+END_SRC

** Web mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.(html?|css|scss|erb|php|[agj]sp|as[cp]x)\\'"
    :config
    (setq
     web-mode-markup-indent-offet 2
     web-mode-css-indent-offset 2))
#+END_SRC
   
** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :commands yaml-mode)
#+END_SRC

* Utility
** Evil-mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (progn
      (setq
       ;; incremental search
       evil-search-module 'isearch

       ;; switch from emacs' default undo
       evil-want-fine-undo t))
    :config
    (progn
      ;; Map C-d C-u
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
      (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-motion-state-map (kbd "C-d") 'evil-scroll-down)

      ;; esc ALWAYS quits
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'my-minibuffer-keyboard-quit)

      ;; map M-x describe-function to 'k'
      (evil-define-key 'normal emacs-lisp-mode-map (kbd "K")
        'elisp-slime-nav-describe-elisp-thing-at-point)

      ;; boot evil by default
      (evil-mode 1)))

#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-last-seen-setup-instructions "1.4.0")
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)

    ;; record when switching from a TODO state to a DONE state
    (setq
     org-log-done 'time
     org-log-done 'note

     org-agenda-files (list "~/org/work.org"
                            "~/org/home.org"
                            "~/org/todo.org")
     org-todo-keywords
     '((sequence "TODO(t)" "|" "DONE(d)")
       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
       (sequence "|" "CANCELED(c)"))

     ;; warn me two weeks in advance about looming deadlines
     org-deadline-warning-days 14))

#+END_SRC
